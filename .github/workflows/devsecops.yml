name: DevSecOps

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 19 * * *"  # ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 19:00 UTC (‡∏ï‡∏µ 2 ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)

permissions:
  contents: read
  security-events: write

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Setup Go
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      # 3Ô∏è‚É£ Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-modules-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            go-modules-${{ runner.os }}-

      # 4Ô∏è‚É£ Run Go tests + coverage
      - name: Run Go Tests
        run: go test ./... -coverprofile=coverage.out

      # 5Ô∏è‚É£ Initialize CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go

      # 6Ô∏è‚É£ Perform CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # 7Ô∏è‚É£ Trivy Scan
      - name: Trivy Scan
        uses: aquasecurity/trivy-action@0.14.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: table
          output: trivy-results.txt

      # 8Ô∏è‚É£ Upload Trivy results
      - name: Upload Trivy Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: trivy-results.txt

      # 9Ô∏è‚É£ Cache Sonar Scanner
      - name: Cache Sonar Scanner
        uses: actions/cache@v3
        id: sonar-cache
        with:
          path: sonar-scanner-5.0.1.3006-linux
          key: sonar-scanner-5.0.1-${{ runner.os }}
          restore-keys: |
            sonar-scanner-5.0.1-${{ runner.os }}

      # 9.5Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SonarQube
      - name: Test SonarQube Server Connection
        run: |
          SONAR_URL="https://sq.cams.dev/"
          echo "Testing connection to SonarQube server at $SONAR_URL"
          curl --head --silent --show-error --connect-timeout 10 "$SONAR_URL"
          echo "Connection test complete."

      # üîü SonarQube Analysis
      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_USER_TOKEN }}
        run: |
          # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞ unzip ‡∏ñ‡πâ‡∏≤ cache ‡∏ß‡πà‡∏≤‡∏á
          if [ ! -d "sonar-scanner-5.0.1.3006-linux" ]; then
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
            unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          fi
          
          # ‡∏ï‡∏±‡πâ‡∏á PATH
          export PATH=$PWD/sonar-scanner-5.0.1.3006-linux/bin:$PATH
          
          # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö version
          sonar-scanner -v
          
          # Run SonarQube
          sonar-scanner -X \
          -Dsonar.projectKey=helloworld \
          -Dsonar.sources=. \
          -Dsonar.host.url=https://sq.cams.dev/ \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.go.coverage.reportPaths=coverage.out \
          -Dsonar.sourceEncoding=UTF-8 \
          -Djavax.net.ssl.trustStore=/etc/ssl/certs/java/cacerts
